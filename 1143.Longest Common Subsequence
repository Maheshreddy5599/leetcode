Recursive solution:
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        return lcsRecursive(text1,text2,text1.length(),text2.length());
    }

    #TLE
    public static int lcsRecursive(String text1,String text2,int n,int m){
        //base case
        if(n==0 || m==0) return 0;

        //case 1 if last character are equal
        if(text1.charAt(n-1)==text2.charAt(m-1)){
            return 1+lcsRecursive(text1,text2,n-1,m-1);
        }else{
            return Math.max(
                lcsRecursive(text1,text2,n,m-1),
                lcsRecursive(text1,text2,n-1,m)
            );
        }
    }
}
=========================================================================================================================
Memorization:
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        // return lcsMemorization(text1,text2,text1.length(),text2.length());
        int n = text1.length();
        int m = text2.length();
        Integer[][] dp = new Integer[n + 1][m + 1];
        return lcsMemorization(text1, text2,n, m, dp);
    }

     int lcsMemorization(String text1, String text2, int n, int m, Integer[][] dp) {
        // base case
        if (n == 0 || m == 0)
            return 0;
        
        if (dp[n][m] != null)
            return dp[n][m];
        
        int lcs = 0;
        if (text1.charAt(n - 1) == text2.charAt(m - 1)) {
            lcs = 1 + lcsMemorization(text1, text2, n - 1, m - 1, dp);
        } else {
            lcs = Math.max(
                lcsMemorization(text1, text2, n - 1, m, dp), 
                lcsMemorization(text1, text2, n, m - 1, dp));
        }
        
        return dp[n][m] = lcs;
    }

   
}
====================================================================================================================
Tabulation
  public int longestCommonSubsequence(String text1, String text2) {
          int n = text1.length();
        int m = text2.length();
        
        int[][] dp = new int[n + 1][m + 1];
        
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (text1.charAt(i -1) == text2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                     dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        
        return dp[n][m];
    }
    
