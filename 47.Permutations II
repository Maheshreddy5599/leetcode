/**
 * Recursive Backtracking using visited array.
 *
 * Time Complexity: O(N * N! + NlogN). Number of permutations = P(N,N) = N!.
 * Each permutation takes O(N) to construct
 *
 * T(n) = n*T(n-1) + O(n)
 * T(n-1) = (n-1)*T(n-2) + O(n)
 * ...
 * T(2) = (2)*T(1) + O(n)
 * T(1) = O(n)
 *
 * Above equations can be added together to get:
 * T(n) = n (1 + n + n*(n-1) + ... + (n....2) + (n....1))
 *      = n (P(n,0) + P(n,1) + P(n,1) + ... + P(n,n-1) + P(n,n))
 *      = n * Floor(e*n!)
 *      = O(N * N!)
 *
 * Space Complexity: O(N). Recursion stack + visited array + Sorting + tempList
 *
 * N = Length of input array.
 */
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }

        Arrays.sort(nums);
        permuteUniqueHelper(result, nums, new ArrayList<>(), new boolean[nums.length]);
        return result;
    }

    private void permuteUniqueHelper(List<List<Integer>> result, int[] nums, List<Integer> tempList, boolean[] visited) {
        if (tempList.size() == nums.length) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            /**
             * !visited[i - 1] is making sure that duplicate results are not added. Since
             * nums[i-1] and nums[i] are same, nums[i] can only be used if nums[i-1] is
             * currently in use.
             */
            if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])) {
                continue;
            }
            visited[i] = true;
            tempList.add(nums[i]);
            permuteUniqueHelper(result, nums, tempList, visited);
            tempList.remove(tempList.size() - 1);
            visited[i] = false;
        }
    }
}
