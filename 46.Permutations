class Solution {
    public List<List<Integer>> permute(int[] nums) {
   List<List<Integer>> list = new ArrayList<>();
   // Arrays.sort(nums); // not necessary
   backtrack(list, new ArrayList<>(), nums);
   return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums){
   System.out.println("called "+" "+ tempList);
   if(tempList.size() == nums.length){
      list.add(new ArrayList<>(tempList));
      System.out.println("printed" +tempList);
   } else{
      for(int i = 0; i < nums.length; i++){ 
         System.out.println(i + " loop  "+nums[i] + " "+ tempList);
           System.out.println(i+ " before backtrack "+nums[i] + " "+ tempList);
         if(tempList.contains(nums[i])) continue; // element already exists, skip
         tempList.add(nums[i]);
         System.out.println(i+ " before backtrack "+nums[i] + " "+ tempList);
         backtrack(list, tempList, nums);
         tempList.remove(tempList.size() - 1);
         System.out.println(i+ " after backtrack "+nums[i]+ " "+tempList);
      }
   }
} 
}
===============================================
backtracking solution
